/*
 ** CS - pin 4 (for MKRZero SD: SDCARD_SS_PIN)
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** DHT11 - pin 7
 ** DS3231, 1602LCD : I2C
*/

#include <SPI.h>
#include <SD.h>
#include <DHT.h>
#include <Wire.h> 

#include <RTClib.h>
#include <LiquidCrystal_I2C.h> // LCD 라이브러리

#define DHT22_PIN 7      //DHT22은 7번 핀에 연결합니다.
dht DHT;
LiquidCrystal_I2C lcd(0x27,16,2);   

float hum; 
float temp;

RTC_DS3231 rtc;
char DOW[7][12] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};  
char chk[7][12] = {"", "*", "**", "***", "****", "*****"};      // 10초당 *를 하나씩 늘려 출력하는 array

File myFile;      //SD 카드의 파일을 받아오는 개체입니다.
int tmp_avr = 0;   //온도 평균값을 저장하기 위한 전역 변수
int hum_avr = 0;   //습도 평균값을 저장하기 위한 전역 변수
int cnt = 0;       //측정 횟수를 저장하기 위한 전역 변수
int time_check = 0;  //저장하기 위한 시간을 체크하는 전역 변수

void setup() {
  Serial.begin(9600);

  Serial.print("Initializing SD card...");   //SD카드의 연결을 확인합니다.
  if (!SD.begin(4)) {    //만약 SD 카드 모듈이 4번 핀에 연결이 안되면...
    Serial.println("initialization failed!");  // 초기화 실패 메시지를 출력!
    while (1);   // 그리고 무한 루프에 빠지게 합니다. 다른게 실행이 안되죠..
  }

  lcd.init();
  lcd.backlight(); // LCD 백라이트 ON
  lcd.begin(16, 2);
  rtc.begin();
  DateTime now = rtc.now();   //현재 시간을 now에 받아오구요,
  time_check = now.minute();  //일단 현재 시간을 체크. 여기선 일단 분 단위로 해봅니다.
}

void loop() {
  int result = DHT.read22(DHT22_PIN);
  hum = DHT.humidity;
  temp= DHT.temperature;
  cnt++;  //측정 횟수에 1을 추가합니다.

  DateTime now = rtc.now();
  int time_temp = now.minute();        //현재 시간을 새로 받아와서 나중에 time_check와 비교. 다르면 저장하도록 할 예정.

  lcd.clear(); // LCD 지우기

  //날짜와 요일을 기록하는 구문
  lcd.setCursor(0, 0); // (0, 0)에 커서 설정
  lcd.print(now.month(), DEC);
  lcd.print("/");
  lcd.print(now.day(), DEC);
  lcd.print("(");
  lcd.print(DOW[now.dayOfTheWeek()]);
  lcd.print(") ");
  lcd.print(chk[int(now.second() / 10)]);  //10초 단위로 *를 하나씩 그려주도록 했습니다.

  //시간을 출력하는 구문
  lcd.setCursor(0, 1); // (0, 1)에 커서 설정
  lcd.print(now.hour(), DEC);
  lcd.print(":");
  lcd.print(now.minute(), DEC);
  lcd.print(":");
  lcd.print(now.second(), DEC);
  lcd.print(" ");

  //온도와 습도를 LCD에 출력하는 문구
  float t = temp;
  lcd.print(int(t));
  lcd.print("C/");
  float h = hum;
  lcd.print(int(hum));
  lcd.print("%");

  // 온도값과 습도 값을 누적해서 더해갑니다. 나중에 측정 횟수로 나누면 평균이 됩니다.
  tmp_avr += t;
  hum_avr += h;

  //만약 시간의 단위가 바뀌었다면 평균을 구하고 SD카드에 시각, 온도, 습도을 저장합니다... (분이나 시간 등)
  if (time_temp != time_check) {
    Serial.print("check ");
    
    myFile = SD.open("record.txt", FILE_WRITE);              //text.txt 파일을 myFile에 쓰기모드로 할당하구요
    if (myFile) {   // 파일이 열리게 되면 아래의 내용을 실행합니다.
          //Serial 모니터에 기록할 내용을 출력해주고,
      Serial.println("Writing time. temp. humi");     //시리얼 모니터에 출력해주고

      //파일에 월,일,시,분, 평균 온도, 평균 습도를 저장합니다.
      myFile.print(now.month(), DEC);
      myFile.print("/");
      myFile.print(now.day(), DEC);
      myFile.print(" ");
      myFile.print(now.hour(), DEC);
      myFile.print(":");
      myFile.print(now.minute(), DEC);
      myFile.print(" ");
      myFile.print("temp:");
      myFile.print(float(tmp_avr / cnt));
      myFile.print(char(223));
      myFile.print("C, ");
      myFile.print(int(humi));
      myFile.println("%");
      myFile.close();   //파일을 닫아줍니다.

      //그 수치를 똑같이 Serial 모니터에도 출력해줍니다.
      Serial.print(now.month(), DEC);
      Serial.print("/");
      Serial.print(now.day(), DEC);
      Serial.print(" ");
      Serial.print(now.hour(), DEC);
      Serial.print("/");
      Serial.print(now.minute(), DEC);
      Serial.print(" ");
      Serial.print("temp:");
      Serial.print(float(tmp_avr / cnt));
      Serial.print(char(223));
      Serial.print("C, ");
      Serial.print(int(hum_avr / cnt));
      Serial.println("%");
    } else {  //파일을 여는데 실패하면 아래 에러 메시지 출력
      Serial.println("error opening record.txt");  //에러 메시지 출력해줍니다.
    }

    //저장할 시간을 새로 업데이트를 해줍니다. 지금 시간으로 업데이트. 또 단위가 바뀌면 저장하도록
    time_check = time_temp;

    //횟수와 온습도를 다시 0으로 초기화해줍니다.
    cnt = 0;
    hum_avr = 0;
    tmp_avr = 0;
    Serial.println("done"); //마쳤다고 Serial 모니터에 done 출력해주고
  }
  delay (2000); // DHT22은 2초 딜레이를 해야합니다.
}
